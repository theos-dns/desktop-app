name: Build/release

on:
  push:
    tags:
      - "v*.*.*"
#  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # macos-latest,
        include:
          - os: ubuntu-latest
            args: "-c electron-builder.yml -l"
          - os: windows-latest
            args: "-c electron-builder.yml -w"
#          - os: macos-latest
#            args: "-c electron-builder.yml -m"

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install apt-gets
        run: sudo apt-get install -y libarchive-tools rpm gcc-multilib g++-multilib snapcraft
        if: matrix.os == 'ubuntu-latest'

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16.17.1

      - name: Build Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}
          skip_build: true
#          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          args: ${{ matrix.os.args }}

      - name: Set Versions
        uses: actions/github-script@v4
        id: set_version
        with:
          script: |
            const tag = context.ref.substring(10)
            const no_v = tag.replace('v', '')
            const dash_index = no_v.lastIndexOf('-')
            const no_dash = (dash_index > -1) ?  no_v.substring(0, dash_index) : no_v
            core.setOutput('tag', tag)
            core.setOutput('no-v', no_v)
            core.setOutput('no-dash', no_dash)
#
#      - name: ls -la
#        run: ls -la
#        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
#      - name: ls -la
#        run: ls -la dist
#        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
#
#      - name: ls -la
#        run: dir
#        if: matrix.os == 'windows-latest'
#      - name: ls -la
#        run: dir dist
#        if: matrix.os == 'windows-latest'
#


#      release win
      - name: Release windows
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'windows-latest'
        with:
          files: |
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-windows-ia32-nsis.exe
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-windows-x64-nsis.exe
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-windows-nsis.exe
            dist/latest.yml

#      release linux
      - name: Release Linux
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          files: |
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-arm64.AppImage
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-x86_64.AppImage
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-amd64.deb
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-arm64.deb
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-arm64.tar.gz
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-x64.tar.gz
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-aarch64.rpm
            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-linux-x86_64.rpm
            dist/latest-linux-arm64.yml
            dist/latest-linux.yml

##      release mac
#      - name: Release MacOs
#        uses: softprops/action-gh-release@v2
#        if: matrix.os == 'macos-latest'
#        with:
#          files: |
#            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-macos-arm64.dmg
#            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-macos-arm64.zip
#            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-macos-x64.dmg
#            dist/Theos-Setup-${{steps.set_version.outputs.no-v}}-macos-x64.zip
#            dist/latest-mac.yml


#      - name: Install Snapcraft
#        uses: samuelmeuli/action-snapcraft@v3

